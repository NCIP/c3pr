<?xml version="1.0" encoding="utf-8" ?>
<!-- bda-build-template version 1.1.1  -->
<!--
$Id: install.xml 1715 2009-05-27 21:43:55Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-build-template/software/build/install.xml $
-->

<project name="c3pr-installer" default="upgrade" basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="local.properties"/>
	<property file="project.properties"/>
	<!-- load the properties file -->
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />

	<!-- Generic properties -->
	<property name="project.name" value="c3pr"/>
	<property name="env.name" value="local"/>
	<property name="log.dir" location="${basedir}/logs" />
	<property name="working.dir" location="${basedir}/working" />
	<property name="temp.dir" location="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" location="${basedir}/bda-utils" />
	<property name="tools.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" location="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" location="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" location="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" location="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" location="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" location="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/c3pr"/>

	<!-- *-ds.xml and WAR -->
	<property name="c3pr-webapp.dir.dist" location="${basedir}/${c3pr-webapp.dist.relative.dir}" />
	<property name="c3pr-webapp.ds.file" value="c3pr-ds.xml" />
	<property name="c3pr-webapp.name" value="c3pr" />
	<property name="c3pr-webapp.war.file" value="${c3pr-webapp.name}.war" />

	<!-- Grid related properties -->

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Clean/make working dir -->
	<delete dir="${working.dir}" failonerror="false"/>
	<mkdir dir="${working.dir}" />

	<!-- Start logging moved out of target so all targets are logged -->
	<!--<property name="install-logs.dir" location="${application.base.path}/change-logs"/> -->
	<property name="install-logs.dir" location="${log.dir}"/>
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

	<!-- Targets begin -->
	<target name="common:init:pre">
		<!-- Set application.base.path based on platform -->
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows" />
		</condition>
		<echo message="application.base.path=${application.base.path}"/>
		<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
	</target>

	<target name="common:tomcat:init" depends="common:init:pre" unless="exclude.tomcat">
		<property name="tomcat.ssl.enable" value="false"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<property name="tomcat.application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/${bda-blueprints-webapp.name}"/>
		<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
		<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
		<basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file"/>
		<dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir"/>
		<basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file"/>
		<property name="tomcat.sock.ports" value="${tomcat.port.http},${tomcat.port.ajp},${tomcat.port.shutdown}"/>
	</target>

	<target name="common:init" depends="common:init:pre">
		<property name="install.running" value="true"/>
		<!-- bda-blueprints-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="postgresql">
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar"/>
				<property name="database.driver" value="org.postgresql.Driver"/>
				<property name="database.schema" value="public"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>

		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path>

		<property name="properties.template.file" value="${basedir}/properties.template" />
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
			<filter token="tomcat.home" value="${tomcat.home}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
			<filter token="env.LOGNAME" value="${env.LOGNAME}"/>
			<filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
			<filter token="project.name" value="project.name"/>
			<filter token="" value=""/>
		</filterset>

		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
	</target>

	<target name="diag">
		<echoproperties/>
	</target>

	<target name="install:common:clean" description="Removes all files from the local filesystem" depends="common:init,install:tomcat:clean">
	</target>

	<target name="install:tomcat:clean" unless="exclude.tomcat" depends="common:init">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat"/>

				<backup-dir
					src.dir="${tomcat.home}"
					backup.base.dir="${backup.tomcat.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${tomcat.home}"/>
	</target>

	<target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
		<validate-pre-install-common
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			/>
	</target>
	<target name="install:tomcat:validation:pre-install" description="Runs pre-install validation checks bda-utils"
		depends="
		common:tomcat:init,
		common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-tomcat
			/>
	</target>
	<target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils"
		depends="
		common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-database
			database.version="${mysql.minimum.version}"
			/>
	</target>
	<target name="install:tomcat:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
		depends="
		common:init,
		install:tomcat:stop
		">
		<validate-pre-tomcat-ports
			/>
	</target>

	<target name="install:common:validation:post-install" description="Run post-install checks from bda-utils"
		depends="
		common:init
		">
		<validate-post-common />
	</target>
	<target name="install:tomcat:validation:post-install" description="Run post-install checks from bda-utils"
		depends="
		common:tomcat:init,
		common:init,
		install:tomcat:start
		">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-tomcat />
			</then>
		</if>
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="
		common:tomcat:init,
		common:init,
		install:tomcat:validation:pre-install,
		install:common:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:configure,
 		install:tomcat:c3pr-webapp:re-configure,
 		install:tomcat:c3pr-webapp,
 		install:tomcat:c3pr-webapp:configure,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" depends="install:tomcat">
	</target>

	<target name="upgrade:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="upgrade:tomcat:init,common:init,upgrade-ncm:tomcat">
	</target>

	<target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade:tomcat:init,common:init,upgrade:tomcat">
	</target>

	<target name="upgrade-dac:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:common:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:configure,
 		install:tomcat:c3pr-webapp:re-configure,
 		install:tomcat:c3pr-webapp,
 		install:tomcat:c3pr-webapp:configure,
		upgrade:post:tomcat,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-cm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:common:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:configure,
 		install:tomcat:c3pr-webapp:re-configure,
 		install:tomcat:c3pr-webapp,
 		install:tomcat:c3pr-webapp:configure,
		upgrade:post:tomcat,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:common:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
 		install:tomcat:c3pr-webapp:re-configure,
 		install:tomcat:c3pr-webapp,
 		install:tomcat:c3pr-webapp:configure,
		upgrade:post:tomcat,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<!--
	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		init:upgrade,
		init:common
		">
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>

	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		init:upgrade,
		init:common,
		install:init
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		init:upgrade,
		init:common,
		install:init
		">
		<database-rollback/>
	</target>
	-->

	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat" depends="common:init,common:tomcat:init">
		<delete dir="${tomcat.home}"/>
		<dirname file="${tomcat.home}" property="tomcat.base.dir"/>
		<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}" />
		<if>
			<os family="unix"/>
			<then>
				<chmod dir="${tomcat.home}/bin" perm="ugo+rx"
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure" description="Configure tomcat (change ports)" unless="exclude.tomcat" depends="common:init,common:tomcat:init">
		<tomcat-configure
			tomcat.grid.configure="true"
			/>
	</target>

	<target name="install:tomcat:stop" description="Stop Tomcat" unless="exclude.tomcat" depends="common:init,common:tomcat:init">
		<if>
			<available file="${tomcat.home}/bin/shutdown.sh"/>
			<then>
				<echo message="Shutting down tomcat"/>
				<tomcat-stop tomcat.home="${tomcat.home}"/>
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat"/>
			</else>
		</if>
	</target>

	<target name="install:tomcat:start" description="Start Tomcat" unless="exclude.tomcat" depends="common:init,common:tomcat:init,install:post:tomcat:c3pr:config">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<tomcat-start tomcat.home="${tomcat.home}"/>
			</then>
		</if>
	</target>

	<target name="install:common:post" depends="
		common:init,
 		install:post:tomcat
		">
	</target>

	<target name="install:post:tomcat" unless="exclude.tomcat" depends="common:init">
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/changeLog-${install.time}.txt"/>
				<property name="compare1.dir" location="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}"/>
				<property name="compare2.dir" location="${tomcat.home}"/>
				<report-dir-diff
					dir1="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}"
					dir2="${tomcat.home}"
					reportFile="${install-logs.dir}/changeLog-tomcat-${install.time}.diff"
					/>

				<!--
				<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log"/>
				<mkdir dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log"/>
				<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
					<fileset dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log">
						<include name="*"/>
					</fileset>
				</copy>
				-->
			</then>
		</if>
	</target>

	<target name="install:tomcat:c3pr-webapp" description="Deploy c3pr-webapp and common libraries to tomcat installation" unless="exclude.tomcat" depends="common:init,common:tomcat:init">
		<!--<delete dir="${tomcat.home}/temp"/> -->
		<delete dir="${tomcat.home}/work"/>
		<delete dir="${tomcat.home}/webapps/${application.context.name}"/>
		<copy file="${c3pr-webapp.dir.dist}/${c3pr-webapp.war.file}" todir="${tomcat.home}/webapps" overwrite="true" />
		<copy file="${database.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />
	</target>
	
	<!-- c3pr target for suite installer -->
	<target name="install:c3pr" description="Install/Deploy c3pr related artifacts onto the tomcat container and configure tomcat with c3pr"
		depends=
		"common:init,
		install:tomcat:c3pr-webapp,
		install:post:tomcat:c3pr:config
		">
	</target>

	<target name="install:tomcat:c3pr-webapp:configure" description="Configure c3pr-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init,common:tomcat:init">
		<!-- in CCTS 2.0 we need to put this jar in WEB-INF Folder , need further investigation-->
<!--		<copy todir="${tomcat.home}/common/lib" overwrite="true">
            <fileset dir="${c3pr-webapp.dir.dist}">
                <include name="cog-jglobus*.jar"/>
            </fileset>
        </copy> -->
	</target>
	<target name="install:post:tomcat:c3pr:config">
		<antcall target="c3pr:datasource:properties:config"/>
		<antcall target="c3pr:csm_jass:config"/>
		<antcall target="c3pr:catalina_property:config"/>
	</target>

	<target name="c3pr:datasource:properties:config" description="Configure tomcat container for c3pr application">
		<mkdir dir="${tomcat.home}/conf/${application.context.name}"/>
		<copy file="${c3pr-webapp.dir.dist}/c3pr-templates/c3pr.datasource.properties" tofile="${tomcat.home}/conf/${application.context.name}/datasource.properties" overwrite="true" />
		<antcall target="c3pr:properties:config">
			<param name="filename" value="datasource.properties"/>
		</antcall>
	</target>
	
	<target name="c3pr:csm_jass:config" description="Configure tomcat container for c3pr application">
		<mkdir dir="${tomcat.home}/conf/cabig"/>
		<copy file="${c3pr-webapp.dir.dist}/c3pr-templates/c3pr.csm_jaas.config" tofile="${tomcat.home}/conf/${application.context.name}/${application.context.name}_csm_jaas.config" overwrite="true" />

		<antcall target="c3pr:properties:config">
			<param name="filename" value="${application.context.name}_csm_jaas.config"/>
		</antcall>
		
		<loadfile property="c3pr.csm.jass.content" srcFile="${tomcat.home}/conf/${application.context.name}/${application.context.name}_csm_jaas.config"/>
		
		<touch file="${tomcat.home}/conf/cabig/csm_jaas.config"/>
		
		<replace file="${tomcat.home}/conf/cabig/csm_jaas.config" token="${c3pr.csm.jass.content}" value=""/>
		
		<echo file="${tomcat.home}/conf/cabig/csm_jaas.config" append="true">&#x0A;${c3pr.csm.jass.content}</echo>	
	</target>
	
	<target name="c3pr:catalina_property:config" description="Configure tomcat container for c3pr application">
		<replace file="${tomcat.home}/conf/catalina.properties" token="java.security.auth.login.config=${tomcat.home}/conf/cabig/csm_jaas.config" value=""/>
		<echo file="${tomcat.home}/conf/catalina.properties" append="true">&#x0A;java.security.auth.login.config=${tomcat.home}/conf/cabig/csm_jaas.config</echo>
	</target>
	
	<target name="c3pr:properties:config" description="Configure tomcat container for c3pr application">
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.driver" value="oracle.jdbc.OracleDriver"/>
				<property name="database.dialect" value="org.hibernate.dialect.Oracle9Dialect"/>
				<property name="csmDatasource.driver" value="oracle.jdbc.OracleDriver"/>
				<property name="csmDatasource.dialect" value="org.hibernate.dialect.Oracle9Dialect"/>
			</case>
			<case value="postgresql">
				<property name="database.driver" value="org.postgresql.Driver"/>
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
				<property name="csmDatasource.driver" value="org.postgresql.Driver"/>
				<property name="csmDatasource.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			</case>
		</switch>

		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@DB_URL@" value="${database.url}" />
		
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@DB_NAME@" value="${database.name}" />
    	<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@DB_USER@" value="${database.user}" />
    	<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@DB_PASSWORD@" value="${database.password}" />
    	
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@DB_DIALECT@" value="${database.dialect}" />
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@DB_DRIVER@" value="${database.driver}" />
		
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@URL@" value="${rules.repository}" />
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@JACKRABBIT_REPOSITORY@" value="${jackrabbit.repository}" />
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@QUARTZ_DELEGATE_CLASSNAME@" value="${jdbc.quartz.delegateClassName}" />
    	<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@AUDIT_DIALECT@" value="${audit.dialect}" />
		
		
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@CSM_DB_URL@" value="${csmDatasource.url}" />
    	<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@CSM_DB_USER@" value="${csmDatasource.user}" />
    	<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@CSM_DB_PASSWORD@" value="${csmDatasource.password}" />
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@CSM_DB_DIALECT@" value="${csmDatasource.dialect}" />
		<replace file="${tomcat.home}/conf/${application.context.name}/${filename}" token="@CSM_DB_DRIVER@" value="${csmDatasource.driver}" />
	</target>
		
	<target name="install:tomcat:c3pr-webapp:re-configure" description="Configure c3pr-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init,common:tomcat:init">
	</target>

	<target name="upgrade:common:init" depends="upgrade:tomcat:init">
	</target>
	<target name="upgrade:tomcat:init"
		depends="
		upgrade:tomcat:init:prep,
		upgrade:tomcat:readers:bda,
		upgrade:tomcat:readers:custom
		">
		<properties-print
			properties.list="${read.properties.list}"
			/>
		<properties-exist
			properties.list="${read.properties.list}"
			/>
		<properties-write
			properties.list="${read.properties.list}"
			/>
	</target>
	<target name="upgrade:common:init:prep" >
		<if>
			<not>
				<isset property="application.base.path"/>
			</not>
			<then>
				<!-- Set application.base.path based on platform -->
				<condition property="application.base.path" value="${application.base.path.linux}">
					<or>
						<os family="unix" />
						<os family="mac" />
					</or>
				</condition>

				<condition property="application.base.path" value="${application.base.path.windows}">
					<os family="windows" />
				</condition>
				<echo message="application.base.path=${application.base.path}"/>
			</then>
		</if>
		<properties-print
			properties.list="application.base.path,jboss.home,tomcat.home,jboss.server.name"
			/>
		<var name="read.properties.list" value=""/>
		<property name="upgrade.running" value="true"/>

	</target>
	<target name="upgrade:tomcat:init:prep" depends="upgrade:common:init:prep" >
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<!-- Upgrades always use port configs -->
		<available file="${tomcat.home}" property="tomcat.exists"/>
		<property name="read.tomcat.home" value="${tomcat.home}"/>
	</target>



	<target name="upgrade:tomcat:readers:custom" depends="upgrade:tomcat:init:prep">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->

	</target>

	<target name="upgrade:tomcat:readers:bda" if="tomcat.exists" depends="upgrade:tomcat:init:prep">
		<var name="read.properties.list" value=""/>

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,tomcat.home"
			/>
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<tomcat-read-ports
			/>
		<var name="tomcat.ssl.keystore.dir" value="${working.dir}/keys/tomcat"/>
		<tomcat-read-ssl copied.keystore.dir="${tomcat.ssl.keystore.dir}" />
		<tomcat-read-external-hostname />
		<!--<grid-read-index-url grid.wsrf.dir="${tomcat.home}/webapps/wsrf" />
		<tomcat-read-grid-secure copied.keystore.dir="${tomcat.grid.secure.dir}" />

		<grid-copy-service-metadata
			grid.wsrf.dir="${tomcat.home}/webapps/wsrf"
			copied.service-metadata.dir="${copied.service-metadata.dir1}"
			/>
		<grid-read-poc
			grid.wsrf.dir="${tomcat.home}/webapps/wsrf"
			grid.service.name="Sample"
			/>    -->
		<!-- Fail if any read properties are not set -->
		<echo message="All properties after readers"/>
		<properties-print
			properties.list="${read.properties.list},jboss.server.hostname,tomcat.hostname"
			/>
		<properties-exist
			properties.list="${read.properties.list},jboss.server.hostname,tomcat.hostname"
			/>
		<properties-write
			properties.list="${read.properties.list},jboss.server.hostname,tomcat.hostname"
			/>
	</target>

	<target name="upgrade:post:tomcat">
		<!-- place holder -->
	</target>
</project>

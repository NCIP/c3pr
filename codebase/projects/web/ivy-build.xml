<?xml version="1.0" encoding="UTF-8"?>
<project name="c3pr-web" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="parent.dir" value="${basedir}/.." />
	<property name="antfiles.dir" location="${parent.dir}/../antfiles"/>
	<property file="${antfiles.dir}/build.properties" />
	<property file="${antfiles.dir}/c3pr-ivy.properties" />
	<import file="${antfiles.dir}/common.xml"/>  
	
	<!--Web Dirs-->
	<property name="web.dir" location="${basedir}/web"/>
    <property name="webinf.dir" value="${web.dir}/WEB-INF"/>
    <property name="webinfviews.dir" value="${web.dir}/WEB-INF/views"/>
	<property name="webinftags.dir" value="${web.dir}/WEB-INF/tags"/>
	<property name="webinfdec.dir" value="${web.dir}/WEB-INF/decorators"/>
	<property name="webinf.wsdl.dir" value="${web.dir}/WEB-INF/wsdl"/>
	<property name="webinfimages.dir" value="${web.dir}/images"/>
    <property name="webinf.lib.dir" value="${webinf.dir}/lib"/>
    <property name="webinf.classes.dir" value="${webinf.dir}/classes"/>
	
	<property name="webapp.name" value="c3pr"/>
	<property name="deploy.path" value="${catalina.home}/webapps"/>
	
	<target name="module-specific-flow" description="Copy resources into classpath" depends="build-ws">
		<property name="build.context.dir" location="${classes.dir}/context"/>
		<copy file="${antfiles.dir}/selenium.properties"
								              tofile="${build.context.dir}/selenium.properties" overwrite="true"/>

		<!--timestamp property-->
        <tstamp>
            <format property="build.timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <!--Unix works for all environments -->
        <pathconvert targetos="unix" property="catalina.home.unix">
            <path location="${catalina.home}"/>
        </pathconvert>

        <!-- copy log4j -->
		<copy file="${antfiles.dir}/c3pr-log4j.properties"
              tofile="${webinf.dir}/log4j.properties"
              overwrite="true"
              filtering="true">
            <!--  <filterset>
                <filter token="catalina.home" value="${catalina.home.unix}"/>
                <filter token="log4j.filename" value="${log4j.filename}"/>
            </filterset>-->
        </copy>

		<!--copy the spring app context files-->
		<copy todir="${classes.dir}" filtering="true" overwrite="true">
            <filterset>
                <filter token="iteration_number" value="${iteration_number}"/>
                <filter token="application_name" value="${application_name}"/>
                <filter token="timestamp" value="${build.timestamp}"/>
            </filterset>
            <fileset dir="${main.src.resources}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

	<!-- ============================================================== -->
    <!-- Creates the war file                                           -->
    <!-- ============================================================== -->
    <target name="war" description="Builds the war files">
    	<delete includeemptydirs="true" dir="${war.dir}"/>
    	<echo>war directory: ${war.dir}</echo>
    	<echo>war filename: ${war.filename}</echo>
    	<mkdir dir="${war.dir}"/>
        <war destfile="${war.dir}/${war.filename}" webxml="${web.dir}/WEB-INF/web.xml">
            <webinf dir="${web.dir}/WEB-INF">
                <include name="**/*"/>
                <exclude name="web.xml"/>
                <exclude name="lib/**"/>
            </webinf>
            <fileset dir="${web.dir}">
                <include name="**/*"/>
                <exclude name="WEB-INF/**"/>
            </fileset>
            <lib file="${ant.project.name}.jar"/>
            <!--<lib dir="${lib.dir}">
                <include name="**/*.jar"/>
            </lib>-->
            <lib dir="${web.dir}/WEB-INF/lib">
                <include name="**/*.jar"/>
            </lib>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
            	<attribute name="Version" value="${c3pr.version}"/>
            </manifest>
        </war>
    </target>

    <target name="deploy-war" description="Will deploy a pre-built war file to Tomcat">
        <copy file="${war.dir}/${war.filename}" todir="${deploy.path}"/>
    </target>

	<target name="deploy-prebuilt" description="Deploys a prebuild webapp">
        <copy todir="${webinf.lib.dir}" preservelastmodified="true">
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
                <exclude name="cog-jglobus*.jar"/>
            	<exclude name="cryptix*.jar"/>
                <exclude name="bouncycastle*.jar"/>
            	 <exclude name="puretls*.jar"/>
            	<exclude name="jce-jdk*.jar"/>
            	<exclude name="*gss.jar"/>
            	<exclude name="servlet-api*.jar"/>
            	<exclude name="jsp-api*.jar"/>
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="**/*.jar"/>
                <exclude name="*-tests*.jar"/>
            </fileset>
        	<fileset dir="${ws.lib.dir}">
        		<include name="**/${ws.jar.file.name}"/>
        	</fileset>
        </copy>

        <!--copy jglobus to $CATALINA_HOME/common-->
		<!-- in CCTS 2.0 we need to put this jar in WEB-INF Folder , need further investigation-->
        <!-- <copy todir="${catalina.home}/common/lib" overwrite="false">
            <fileset dir="${lib.dir}">
                <include name="cog-jglobus*.jar"/>
            </fileset>
        </copy> -->
    </target>

	<target name="deployLocal" description="Deploy web application to local folders">
		<ant target="deployLocalInternal" antfile="ivy-build.xml" dir="." inheritall="false">
		    		<property name="env.skip.test" value="true"></property>
	    </ant>
    </target>
    
    <target name="deployLocalInternal" depends="clean, publish-local,deploy-prebuilt" description="Deploy web application to local folders">
    </target>
	
	<!-- ====================================================================== -->
    <!-- Deploys the webapp (note:- only web + core projects )in Catalina_home  -->
    <!-- ====================================================================== -->
    <target name="deploy" depends="deployLocal" description="Deploy web application to tomcat">
    	<delete dir="${deploy.path}/${webapp.name}" />
        <copy todir="${deploy.path}/${webapp.name}"  preservelastmodified="true">
            <fileset dir="${web.dir}"/>
        </copy>
    </target>

    <target name="copy-views" description="Explicitly copy the views folder ">
        <copy todir="${deploy.path}/${webapp.name}/WEB-INF/views/" preservelastmodified="true">
            <fileset dir="${webinfviews.dir}"/>
        </copy>
    	<copy todir="${deploy.path}/${webapp.name}/WEB-INF/tags/" preservelastmodified="true">
            <fileset dir="${webinftags.dir}"/>
        </copy>
    	<copy todir="${deploy.path}/${webapp.name}/WEB-INF/decorators/" preservelastmodified="true">
            <fileset dir="${webinfdec.dir}"/>
        </copy>
    	<copy todir="${deploy.path}/${webapp.name}/images/" preservelastmodified="true">
            <fileset dir="${webinfimages.dir}"/>
        </copy>
    </target>
	
	<!-- ============================================================== -->
    <!-- Cleans up generated stuff                                      -->
    <!-- ============================================================== -->
    <target name="clean" depends="clean-classes, clean-classes-test, clean-generated-src, clean-dist, clean-lib, clean-lib-test, clean-test-results, clean-test-reports" description="Removes generated files.">
        <delete dir="${webinf.lib.dir}"/>
        <delete dir="${webinf.classes.dir}"/>
    </target>
	
	
	
	<!-- =============================================================== -->
	    <!-- selenium-test              -->
	    <!-- =============================================================== -->
	
    <target name="selenium-test" if="run.test" depends="clean-dist, init, local-version, jar, jar-test, debug-info, compile-test"
            description="Runs the selenium testcases">

        <echo message="Executing in ${ant.project.name}"/>
        <echo
                message="Test results dir: ${test.results.dir}, with pattern ${selenium-testPattern} and classes from ${test.classes.dir}"/>
        <mkdir dir="${test.results.dir}"/>
    	
        <junit printsummary="yes" errorproperty="test.failed" failureproperty="test.failed"
               showoutput="true" fork="true" forkmode="once" timeout="600000">
        	
            <classpath refid="test.run.classpath"/>
            <classpath>
                <pathelement path="${clover.jar}"/>
            </classpath>

            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.results.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="${selenium-testPattern}"/>
                </fileset>
            </batchtest>
        </junit>
    	

    </target>
	
	
	<!-- ========================================================================
	       target: migrate-selenium-data
	        Will run the sample data migration for selenium..
	   ============================================================================= -->

	    <target name="migrate-selenium-data" description="add sample data" depends="find-datasource">
	        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="main.classpath"/>
	        <property file="${dsFile}"/>
	        <echo>add sample data into ${datasource.url}</echo>
	        <dbunit classpathRef="main.classpath"
	                driver="${datasource.driver}"
	                url="${datasource.url}"
	                userid="${datasource.username}"
	                password="${datasource.password}">
	            <operation type="INSERT"
	                       src="src/resources/edu/duke/cabig/c3pr/dao/testdata/StudyDaoTest.xml"/>
	           <!-- <operation type="INSERT"
	                       src="src/test/resources/gov/nih/nci/ctcae/selenium/testdata/questions.xml"/> -->
	        </dbunit>
	    </target>

	<!-- ========================================================================
	       target: start-server
	        Will start the selenium server..
	   ============================================================================= -->

	    <target name="start-server" depends="stop-server">
	        <java jar="../tools/selenium/selenium-server.jar" fork="true" failonerror="true"/>
	    </target>


	    <!-- ========================================================================
	       target: stop-server
	        Will stop the selenium server..
	   ============================================================================= -->

	    <target name="stop-server" description="description" depends="find-datasource">
	        <echo message="shutdown failed" file="selenium-shutdown-result.txt"/>
	        <property file="${dsFile}"/>

	        <get src="http://localhost:4444/selenium-server/driver/?cmd=shutDown"
	             dest="selenium-shutdown-result.txt"
	             ignoreerrors="true"/>
	        <loadfile property="selenium.shutdown.results" srcfile="selenium-shutdown-result.txt"/>
	        <echo message="selenium shutdown status: ${selenium.shutdown.results}"/>
	    </target>
	
		<target name="test-integration" depends="find-datasource"> 
			
			<tstamp prefix="test.integration">
				<format property="instant" pattern="yyMMddHHmmss"/>				
			</tstamp>			
			<property name="test.tomcat.location" value="${java.io.tmpdir}/${test.integration.instant}"/>
			<property name="test.war.file" value="${war.dir}/${war.filename}"/>
			 
			<mkdir dir="${test.results.dir}" />
			<mkdir dir="${test.tomcat.location}"/>
			
			<echo message="Executing in ${ant.project.name}" />
			<echo message="Test results dir: ${test.results.dir}, with pattern ${testPattern} and classes from ${test.classes.dir}" />
			<echo message="Tomcat's home will be set to ${test.tomcat.location}" /> 
			<echo message="Datasource properties file to be used will be ${dsFile}" />
			<echo message="WAR file to be used will be ${test.war.file}" />			
			
			<junit printsummary="yes" errorproperty="test.failed" failureproperty="test.failed" 
				showoutput="true" fork="true" timeout="600000" maxmemory="500m" >
		
				<!--
				<jvmarg value="-Dcom.sun.management.jmxremote"/>
				<jvmarg value="-Dcom.sun.management.jmxremote.port=8000"/>
				<jvmarg value="-Dcom.sun.management.jmxremote.ssl=false"/>
				<jvmarg value="-Dcom.sun.management.jmxremote.authenticate=false"/>
				--> 
				<jvmarg value="-XX:MaxPermSize=350M"/> 
				
				<!-- Set temporary tomcat location to prevent collision with any existent setup -->
				<env key="TOMCAT_HOME" value="${test.tomcat.location}"/>
				<env key="CATALINA_HOME" value="${test.tomcat.location}"/>
				
				<!-- Need to also pass a ref to the datasource properties. csm_jaas will be created by the test itself. -->
				<sysproperty key="test.datasource.file" value="${dsFile}"/>
				
				<!-- Need to pass a ref to the WAR file that has been built. It will be deployed by the embedded Tomcat -->
				<sysproperty key="test.war.file" value="${test.war.file}"/>

				<classpath refid="test.tomcat.embedded.run.classpath" />		
				
				<formatter type="plain"/>
				<formatter type="xml" />
					
				<batchtest fork="yes" todir="${test.results.dir}">
					<fileset dir="${test.classes.dir}">						
						<include name="edu/duke/cabig/**/SubjectManagementWebServiceTest.class"/>
						<include name="edu/duke/cabig/**/StudyUtilityWebServiceTest.class"/>
						<include name="edu/duke/cabig/**/SubjectRegistryWebServiceTest.class"/>
					</fileset>
				</batchtest>
				
			</junit>			
		</target>
	
		<target name="build-ws" depends="compile-ws">	
			<makeJar dir="${ws.lib.dir}" dir.classes="${ws.classes.dir}" file.name="${ws.jar.file}"/>
			<!--<copy file="${ws.jar.file}" todir="${lib.dir}" overwrite="true"/>
			<copy file="${ws.jar.file}" todir="${test.lib.dir}" overwrite="true"/> -->
		</target>
	
		<target name="compile-ws" depends="clean-classes-ws, resolve-ws">
			<taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
				  <classpath>
					<fileset dir="${ws.lib.dir}">
						<include name="**/*.jar" />
					</fileset>				  	
				  </classpath>			      
			</taskdef>
			<taskdef resource="net/sf/antcontrib/antcontrib.properties">
				  <classpath>
				  	<fileset dir="${ws.lib.dir}">
				  		<include name="**/ant-contrib*.jar" />
				  	</fileset>	
				  </classpath>
			</taskdef>
			<foreach param="wsdlFile" target="run-wsimport">
				<path>
					<fileset dir="${webinf.wsdl.dir}" includes="*.wsdl"/>
				</path>
			</foreach>
		</target>
	
		<target name="run-wsimport">
			<wsimport           
			      wsdl="${wsdlFile}"      
			      destdir="${ws.classes.dir}"
			      sourcedestdir="${ws.classes.src}"
			      keep="true"			      
			      verbose="true">		      
			</wsimport>			
		</target>
	
		<target name="resolve-ws" depends="clean-lib-ws, init, load-ivy" unless="already.resolved-ws"
	    	description="--> resolve and retrieve 'ws' dependencies with ivy">
	    	<echo message="Executing ${ant.project.name} : resolve-ws" />
	    	<ivyResolve confs="ws" libdir="${ws.lib.dir}" resolveid="[org]-[module]-ws"/>
	    	<property name="already.resolved-ws" value="true"/>
	    </target>
	
	    <target name="clean-lib-ws" description="--> clean the project libraries directory (dependencies)">
    		<echo message="Executing in ${ant.project.name}" />
        	<delete includeemptydirs="true" dir="${ws.lib.dir}" failonerror="false"/>
	    	<mkdir dir="${ws.lib.dir}"/>
    	</target>
	
		<target name="clean-classes-ws">
	    	<echo message="Executing in ${ant.project.name}" />
        	<delete includeemptydirs="true" dir="${ws.classes.dir}" failonerror="false"/>
			<delete includeemptydirs="true" dir="${ws.classes.src}" failonerror="false"/>
	    	<mkdir dir="${ws.classes.dir}"/>
			<mkdir dir="${ws.classes.src}"/>
	    </target>	
	
</project>

<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- ================================================================= -->
<project name="c3pr-2.0-core" default="all" basedir=".">
    <!-- Environment -->
    <property environment="env"/>
    <property name="catalina.home" value="${env.CATALINA_HOME}"/>

    <!-- Information -->
    <property name="project.name" value="core"/>
    <property name="project.version" value="1.0"/>

    <!--src dirs-->
    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.java.dir" value="${src.dir}/java"/>
    <property name="src.resources.dir" value="${src.dir}/resources"/>

    <property name="resources.dir" value="${basedir}/resources"/>
    <property name="lib.dir" value="${basedir}/lib"/>

    <!--build dirs-->
    <property name="build.dir" value="${basedir}/build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="${build.dir}/jars"/>
    <property name="project.jarfile" value="${jar.dir}/c3pr-2.0-${project.name}-${project.version}.jar"/>

    <!--ext dirs-->
    <property name="ext.dir" value="${basedir}/ext"/>
    <property name="ext.lib.dir" value="${ext.dir}/lib"/>
    <property name="ext.test.lib.dir" location="${ext.dir}/test/lib"/>
    <property name="ext.resources.dir" location="${ext.dir}/resources"/>

    <!-- testing stuff -->
    <property name="test.dir" location="${basedir}/test"/>
    <property name="test.src.dir" location="${test.dir}/src"/>
    <property name="test.src.java.dir" location="${test.src.dir}/java"/>
    <property name="test.src.resources.dir" location="${test.src.dir}/resources"/>

    <property name="test.classes.dir" location="${build.dir}/classes-test"/>
    <property name="test.lib.dir" location="${test.dir}/lib"/>
    <property name="test.logs.dir" location="${test.dir}/logs"/>
    <property name="test.project.jar" location="${jar.dir}/c3pr-2.0-${project.name}-tests-${project.version}.jar"/>
    <!-- Load common util path -->
    <import file="antfiles/build-test.xml"/>

    <property name="conf.dir" value="${basedir}/conf/"/>

    <!--db dir-->
    <property name="db.scripts.dir" value="${basedir}/db"/>
    <property name="bering.migration.dir" value="${db.scripts.dir}/bering"/>

    <property name="oracle.db.script.dir" value="${db.scripts.dir}/oracle"/>
    <property name="postgresql.db.script.dir" value="${db.scripts.dir}/PostGreSQL"/>
    <property name="oracle.csm.db.scripts.dir" value="${oracle.db.script.dir}/csm"/>
    <property name="postgresql.csm.db.scripts.dir" value="${postgresql.db.script.dir}/csm"/>

    <!-- core properties -->
    <property name="core.properties.file" value="${conf.dir}/core.properties"/>

    <property name="csm.conf.dir" value="${conf.dir}/csm"/>

    <property name="debug" value="on"/>


    <!-- =============================================================== -->
    <!-- The Build Classpath                                             -->
    <!-- =============================================================== -->
    <path id="build.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${ext.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.classpath">
        <fileset dir="${ext.dir}/compile/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path refid="build.classpath"/>
    </path>

    <!-- =============================================================== -->
    <!-- The Run Classpath                                                   -->
    <!-- =============================================================== -->
    <path id="run.classpath">
        <path refid="build.classpath"/>
        <fileset dir="${jar.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/*test*.jar"/>
        </fileset>
    </path>

    <!-- =============================================================== -->
    <!-- The Test Classpath                                                   -->
    <!-- =============================================================== -->
    <path id="test.classpath">
        <path refid="build.classpath"/>
        <fileset dir="${ext.dir}/compile/lib">
            <include name="c3pr-*.jar"/>
        </fileset>
        <fileset dir="${jar.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${test.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${ext.test.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!--custom taskdefs-->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${ext.lib.dir}/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!-- =============================================================== -->
    <!-- Prepares the build directory                                    -->
    <!-- =============================================================== -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${test.lib.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${jar.dir}"/>

    </target>

    <target name="resources" description="Copy resources into classpath" depends="prepare">
        <!--load ext property files-->
        <property file="${ext.resources.dir}/build.properties"/>

        <copy file="${core.properties.file}"
              tofile="${classes.dir}/context/core.properties"
              overwrite="true"
              filtering="true">
            <filterset>
                <filter token="datasource.url" value='${datasource.url}'/>
                <filter token="datasource.username" value="${datasource.username}"/>
                <filter token="webapp.project.name" value="${project.name}"/>
                <filter token="datasource.password" value="${datasource.password}"/>
                <filter token="datasource.schema" value="${datasource.schema}"/>
                <filter token="datasource.driver" value="${datasource.driver}"/>
                <filter token="datasource.dialect" value="${datasource.dialect}"/>
                <filter token="esb.brokerUrl" value="${esb.brokerUrl}"/>
                <filter token="authorizationSwitch" value="${authorizationSwitch}"/>
                <filter token="csm.context.name" value="${csm.context.name}"/>
                <filter token="show_sql" value="${log_sql}"/>

                <filter token="outgoing.mail.server" value="${outgoing.mail.server}"/>
                <filter token="outgoing.mail.username" value="${outgoing.mail.username}"/>
                <filter token="outgoing.mail.password" value="${outgoing.mail.password}"/>
                <filter token="outgoing.mail.from.address" value="${outgoing.mail.from.address}"/>
            </filterset>
        </copy>

        <!--copy the castor mapping file-->
        <copy todir="${classes.dir}">
            <fileset dir="${src.resources.dir}">
                <include name="**/*.xml"/>
            </fileset>
            <fileset dir="${resources.dir}">
                <include name="c3pr-castor-mapping.xml"/>
            </fileset>
            <fileset dir="${resources.dir}/xsd">
                <include name="c3pr-domain.xsd"/>
            </fileset>
        </copy>

        <echo>All database ops for this build will use ${datasource.url}</echo>

    </target>

    <!-- =============================================================== -->
    <!-- Compiles the source code                                        -->
    <!-- =============================================================== -->
    <target name="compile" depends="prepare, resources" description="compiles">
        <javac srcdir="${src.java.dir}" destdir="${classes.dir}" debug="${debug}" target="1.5" deprecation="off"
               optimize="off" failonerror="true">
            <classpath refid="build.classpath"/>
        </javac>
    </target>
    <!-- =============================================================== -->
    <!-- Compiles the test source code                                        -->
    <!-- =============================================================== -->
    <target name="compile-tests" depends="prepare, resources" description="compiles.">
        <javac srcdir="${test.src.java.dir}" destdir="${test.classes.dir}" debug="${debug}" deprecation="off" optimize="off">
            <classpath refid="test.classpath"/>
        </javac>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.resources.dir}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>
    <!-- ============================================================== -->
    <!-- Cleans up generated stuff                                      -->
    <!-- ============================================================== -->
    <target name="clean" depends="" description="Removes generated files.">
        <delete dir="${build.dir}"/>
    </target>
    <!-- ============================================================== -->
    <!-- Creates the jar files                                     -->
    <!-- ============================================================== -->
    <target name="jar" depends="compile" description="Builds the Jar Files">
        <jar jarfile="${project.jarfile}" basedir="${classes.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>


    <!-- ============================================================== -->
    <!-- Creates the jar files                                          -->
    <!-- ============================================================== -->
    <target name="jar-tests" depends="compile-tests" description="Builds the Jar Files">
        <jar jarfile="${test.project.jar}" basedir="${test.classes.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>
        </jar>
    </target>


    <!-- ============================================================== -->
    <!-- Bering migration task                                          -->
    <!-- ============================================================== -->
    <target name="prepare-bering" depends="jar">
        <!--Taskdef. Has to be done inside since classpath is ext-->
        <taskdef resource="edu/northwestern/bioinformatics/bering/antlib.xml"
                 classpathref="compile.classpath"/>

        <property name="oracle.keyword" value="Oracle"/>
        <property name="postgresql.keyword" value="PostgreSQLDialect"/>

        <condition property="bering.dialect" value="edu.northwestern.bioinformatics.bering.dialect.PostgreSQL">
            <contains string="${datasource.dialect}" substring="${postgresql.keyword}"/>
        </condition>

        <condition property="bering.dialect" value="edu.northwestern.bioinformatics.bering.dialect.Oracle">
            <contains string="${datasource.dialect}" substring="${oracle.keyword}"/>
        </condition>

    </target>

    <target name="bering-migrate" description="migrate database schema"
            depends="prepare-bering">


        <migrate classpathRef="run.classpath"
                 driver="${datasource.driver}"
                 dialect="${bering.dialect}"
                 url="${datasource.url}"
                 userid="${datasource.username}"
                 password="${datasource.password}"
                 migrationsDir="${bering.migration.dir}"/>
    </target>


    <target name="bering-migrate-test" description="migrate database schema to run tests"
            depends="prepare-bering">

        <property name="test.script.name" value="006_c3pr_delete_static_data"/>

        <trycatch property="exception">
            <try>
                <move file="${bering.migration.dir}/001_construction_iteration4/${test.script.name}.template"
                      tofile="${bering.migration.dir}/001_construction_iteration4/${test.script.name}.groovy"/>

                <migrate classpathRef="run.classpath"
                         driver="${datasource.driver}"
                         dialect="${bering.dialect}"
                         url="${datasource.url}"
                         userid="${datasource.username}"
                         password="${datasource.password}"
                         migrationsDir="${db.scripts.dir}/bering"/>

            </try>

            <catch>
                <echo message="Database update failed: ${exception}"/>
            </catch>

            <finally>
                <move file="${bering.migration.dir}/001_construction_iteration4/${test.script.name}.groovy"
                      tofile="${bering.migration.dir}/001_construction_iteration4/${test.script.name}.template"/>

            </finally>
        </trycatch>

    </target>

    <target name="insert-static-data" depends="prepare-bering" 
            description="Will insert static date into the database">

        <sql driver="${datasource.driver}"
             url="${datasource.url}"
             userid="${datasource.username}"
             password="${datasource.password}"
             classpathref="run.classpath"
             rdbms="oracle">
            <transaction src="${oracle.db.script.dir}/static-data.sql"/>
        </sql>

        <sql driver="${datasource.driver}"
             url="${datasource.url}"
             userid="${datasource.username}"
             password="${datasource.password}"
             classpathref="run.classpath"
             rdbms="postgres">
            <transaction src="${postgresql.db.script.dir}/static-data.sql"/>
        </sql>

    </target>

    <target name="delete-static-data" depends="prepare-bering"
               description="Will insert static date into the database">

           <sql driver="${datasource.driver}"
                url="${datasource.url}"
                userid="${datasource.username}"
                password="${datasource.password}"
                classpathref="run.classpath"
                rdbms="oracle">
               <transaction src="${oracle.db.script.dir}/static-data-delete.sql"/>
           </sql>

           <sql driver="${datasource.driver}"
                url="${datasource.url}"
                userid="${datasource.username}"
                password="${datasource.password}"
                classpathref="run.classpath"
                rdbms="postgres">
               <transaction src="${postgresql.db.script.dir}/static-data-delete.sql"/>
           </sql>

       </target>


    
    <target name="tomcat.security" description="Automatically copies global (CSM/UPT) configuration files to Tomcat.">
        <fail message="Could not locate Tomcat.  Please set the catalina.home property (-Dcatalina.home=/path/to/tomcat).">
            <condition>
                <not>
                    <isset property="catalina.home"/>
                </not>
            </condition>
        </fail>

        <property file="${ext.resources.dir}/build.properties"/>

        <property name="catalina.home" value="PLEASE SET catalina.home EXTERNALLY"/>
        <echo>Configuring CSM and UPT for the Tomcat instance in ${catalina.home}</echo>
        <property name="tomcat.security.dir" value="${catalina.home}/conf/cabig"/>

        <!-- default UPT dialect to same as SC's, if not already set -->
        <property name="datasource.dialect.upt" value="${datasource.dialect}"/>
        <mkdir dir="${tomcat.security.dir}"/>
        <copy todir="${tomcat.security.dir}" overwrite="true">
            <filterset>
                <filter token="tomcat.security.dir" value="${tomcat.security.dir}"/>
                <filter token="datasource.username" value="${datasource.username}"/>
                <filter token="datasource.password" value="${datasource.password}"/>
                <filter token="datasource.url" value='${datasource.url}'/>
                <filter token="datasource.driver" value="${datasource.driver}"/>
                <filter token="datasource.dialect.upt" value="${datasource.dialect}"/>
                <filter token="csm.context.name" value="${csm.context.name}"/>
            </filterset>
            <fileset dir="${csm.conf.dir}">
                <include name="ApplicationSecurityConfig.xml"/>
                <include name="hibernate.cfg.xml"/>
                <include name="csm_jaas.config"/>
            </fileset>
        </copy>

        <copy file="${tomcat.security.dir}/hibernate.cfg.xml"
              tofile="${tomcat.security.dir}/${csm.context.name}.hibernate.cfg.xml"/>
        <delete file="${tomcat.security.dir}/hibernate.cfg.xml"/>

        <echo taskname="todo">
            ===== MANUAL STEPS =====
            ========================
            The automatic portion of the security setup is complete. If you have not
            done so already, please perform the following manual actions.

            * In ${catalina.home}/conf/catalina.properties, add two lines:
            gov.nih.nci.security.configFile=${tomcat.security.dir}/ApplicationSecurityConfig.xml
            java.security.auth.login.config=${tomcat.security.dir}/csm_jaas.config

            * Execute ${basedir}/tools/csm/DataLoadPostgresCSMUser.sql
            against your target database (${datasource.url}).
            ========= END ==========
            ===== MANUAL STEPS =====
        </echo>
    </target>

    <!-- ============================================================== -->
    <!-- Builds from scratch                                                -->
    <!-- ============================================================== -->
    <target name="all" description="Builds the entire application" depends="clean,jar,jar-tests"/>
</project>

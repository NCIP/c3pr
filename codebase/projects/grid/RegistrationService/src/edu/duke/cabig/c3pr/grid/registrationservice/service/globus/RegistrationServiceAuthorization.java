/*******************************************************************************
* Copyright Duke Comprehensive Cancer Center and SemanticBits
* 
* Distributed under the OSI-approved BSD 3-Clause License.
* See https://github.com/NCIP/c3pr/LICENSE.txt for details.
*******************************************************************************/
package edu.duke.cabig.c3pr.grid.registrationservice.service.globus;


import java.rmi.RemoteException;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.context.ApplicationContext;
import org.w3c.dom.Node;

import edu.duke.cabig.c3pr.grid.registrationservice.service.impl.RegistrationAuthorizationI;
import edu.duke.cabig.c3pr.grid.registrationservice.service.impl.RegistrationAuthorizationImpl;
import edu.duke.cabig.c3pr.grid.registrationservice.service.impl.SpringApplicationContextProvider;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class RegistrationServiceAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://registrationservice.grid.c3pr.cabig.duke.edu/RegistrationService";
	public static RegistrationAuthorizationI registrationAuthorization;
	
	static{
		System.out.println("Loading applicationContext-grid-c3prRegistrationService.xml from classpath");
		try {
			ApplicationContext appContext=SpringApplicationContextProvider.getApplicationContext();
			if(appContext==null){
			    System.out.println("no applicationContext-grid-c3prRegistrationService.xml in classpath. Loading default registration authorization impl...");
			    registrationAuthorization=new RegistrationAuthorizationImpl();
			}else{
				try {
					registrationAuthorization=(RegistrationAuthorizationI)appContext.getBean("registrationAuthorization");
					System.out.println("applicationContext-grid-c3prRegistrationService.xml found in classpath. Loaded registration authorization impl...");
				} catch (NoSuchBeanDefinitionException e) {
					System.out.println("applicationContext-grid-c3prRegistrationService.xml found in classpath but no custom authorization found. Loading default registration authorization impl...");
					registrationAuthorization=new RegistrationAuthorizationImpl();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public RegistrationServiceAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public static void authorizeGetMultipleResourceProperties() throws RemoteException {
		registrationAuthorization.authorizeGetMultipleResourceProperties(getCallerIdentity());
		
	}
					
	public static void authorizeGetResourceProperty() throws RemoteException {
		registrationAuthorization.authorizeGetResourceProperty(getCallerIdentity());
		
	}
					
	public static void authorizeQueryResourceProperties() throws RemoteException {
		registrationAuthorization.authorizeQueryResourceProperties(getCallerIdentity());
		
	}
					
	public static void authorizeGetServiceSecurityMetadata() throws RemoteException {
		registrationAuthorization.authorizeGetServiceSecurityMetadata(getCallerIdentity());
		
	}
					
	public static void authorizeEnroll() throws RemoteException {
		registrationAuthorization.authorizeEnroll(getCallerIdentity());
		
	}
					
	public static void authorizeTransfer() throws RemoteException {
		registrationAuthorization.authorizeTransfer(getCallerIdentity());
		
	}
					
	public static void authorizeOffStudy() throws RemoteException {
		registrationAuthorization.authorizeOffStudy(getCallerIdentity());
		
	}
					
	public static void authorizeGetRegistrations() throws RemoteException {
		registrationAuthorization.authorizeGetRegistrations(getCallerIdentity());
		
	}
	
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("getMultipleResourceProperties")){
			try{
				authorizeGetMultipleResourceProperties();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getResourceProperty")){
			try{
				authorizeGetResourceProperty();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("queryResourceProperties")){
			try{
				authorizeQueryResourceProperties();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			try{
				authorizeGetServiceSecurityMetadata();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("enroll")){
			try{
				authorizeEnroll();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("transfer")){
			try{
				authorizeTransfer();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("offStudy")){
			try{
				authorizeOffStudy();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getRegistrations")){
			try{
				authorizeGetRegistrations();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {

	}
	
	
}

<?xml version="1.0"?>
<project name="common" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<property environment="env" />
	<property name="catalina.home" value="${env.CATALINA_HOME}"/>
	<!-- Ivy jar location -->
	<!--property name="ivy.jar.dir" value="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" /-->

	<condition property="ivy.available">
		<available file="${ivy.jar.file}" />
	</condition>
	
	<!-- created database type var for CI to make single target independant of database type
		 provide -Ddatabase.type=oracle for ORACLE and  -Ddatabase.type=postgres for POSTGRES
		defaults to postgres    -->
	<property name="database.type" value="postgres" />
	<property name="testcase.type" value="backend" />
	
	<!-- The default DB setting to be used can be overriden using -Ddb=xxxx runtime option.
		Helps pick the datasource.properties file. 
	-->
	<condition property="databaseConfigurationName" else="datasource" value="${db}">
		<isset property="db"/>
	</condition>
	
	<condition property="jsch.available">
		<available file="${ivy.jar.dir}/jsch-0.1.31.jar" />
	</condition>
	
	<condition property="ant.contrib.available">
		<available file="${lib.dir}/ant-contrib-1.0b2.jar" />
	</condition>
	
	<!--===========================================================================
	   Condition which determines the type of database and sets the corresponding property to true.
	   So for postgres: postgres.true is set while oracle.true is not set.
	   Note that if condition checks to see whether the property is set and not if property value
	   is true. so a target would run even if the property in the if condition was set to false
	=========================================================================-->
	<target name="check-database-type">
		<condition property="oracle.true">
			<equals arg1="${database.type}" arg2="oracle" />
		</condition>
		<condition property="postgres.true">
			<equals arg1="${database.type}" arg2="postgres" />
		</condition>
		<echo message="postgres.true is ${postgres.true}" />
		<echo message="oracle.true is ${oracle.true}" />
	</target>
	
	<target name="check-testcase-type">
		<condition property="ui.true">
			<equals arg1="${testcase.type}" arg2="ui" />
		</condition>
		<condition property="backend.true">
			<equals arg1="${testcase.type}" arg2="backend" />
		</condition>
		<echo message="ui.true is ${ui.true}" />
		<echo message="backend.true is ${backend.true}" />
	</target>

	<!-- ===================================================================
		copy-resources : This task, copy files from source to destination, with filtering on
	======================================================================= -->
	<macrodef name="copy-resources" description="copies files from src to dest, with filtering">
		<attribute name="src" />
		<attribute name="dest"/>
		<attribute name="filter" />
		<sequential>
			<filter token="databaseConfigurationName" value="${databaseConfigurationName}" />
			<filter token="project.version" value="${c3pr.version}" />
			<filter token="buildNumber" value="${today}" />
			<copy todir="@{dest}" filtering="@{filter}">
				<fileset dir="@{src}" includes="**/*.*">
					<exclude name=".svn"/>
					<exclude name="applicationContext-test.xml"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	
	<!-- ===================================================================
		makeJar : This task, can be used to make a jarfile.
	======================================================================= -->
	
	<macrodef name="makeJar" description="Task will help in making jar files with manifest">
		<attribute name="file.name"/>
		<attribute name="dir"/>
		<attribute name="dir.classes" />
		<sequential>
			<mkdir dir="@{dir}"/>
	        <jar destfile="@{file.name}">
	            <fileset dir="@{dir.classes}" />
	            <manifest>
	                <attribute name="Built-By" value="${user.name}"/>
	                <attribute name="Build-Version" value="${version}" />
	            </manifest>
	        </jar>
		</sequential>
	</macrodef>
	<!-- =============================================================================
		ivyResolve : Will resolve the confs to the libDir
	================================================================================= -->
	<macrodef name="ivyResolve">
		<attribute name="libDir"/>
		<attribute name="confs"/>
		<attribute name="resolveId"/>
		<sequential>
			<ivy:resolve file="${ivy.file}" conf="@{confs}" resolveid="@{resolveId}" haltonfailure="false" settingsRef="c3pr.ivy.instance"/>
			<ivy:retrieve pattern="@{libDir}/[artifact]-[revision].[ext]" resolveid="@{resolveId}" haltonfailure="false" settingsRef="c3pr.ivy.instance"/>
		</sequential>
	</macrodef>

	
	<!-- If present, will skip the execution of testcases -->
		<property name="skip.test" value="${env.skip.test}" />
		<condition property="run.test">
			<isfalse value="${skip.test}" />
		</condition>
	
	<!--Check for JDK version, we need to make sure that JDK 1.5 we use -->
	<condition property="isJDK1.5">
		<or>
			<equals arg1="${ant.java.version}" arg2="1.5" />
			<equals arg1="${ant.java.version}" arg2="1.6" />
		</or>
	</condition>
	<fail message="JDK 1.5 is currently required to build this project!" unless="isJDK1.5" />
	
	<!-- This path will contain all the libraries required to compile
		the main application -->
	<path id="main.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<!-- This path will contain all the classes that are required to 
		compile test cases -->
	<path id="test.classpath">
		<pathelement path="${jar.file}" />
		<path refid="main.classpath" />
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<!-- This path will contain the test dependencies and test classes -->
	<path id="test.run.classpath">
		<path refid="test.classpath" />
		<pathelement path="${test.classes.dir}" />
	</path>
	
	<!-- refers to project root dir -->
	<dirname file="${ant.file.common}" property="proj.root.dir"/>
	<property name="local.repo.dir" value="${proj.root.dir}/../repository" />
	<condition property="local.repo.available">
		<available file="${local.repo.dir}" /> 
	</condition>
	<!-- ====================================================
			target : create-local-repo
			This target will create local repository if one is not available
	=======================================================-->
	<target name="create-repo" unless="local.repo.available"
		 description="Will create a local repository directory if it is not available">
		<echo message="create-local-repo: Creating a local repository : ${local.repo.dir}" />
		<mkdir dir="${local.repo.dir}"/>
	</target>
	
	<!-- ====================================================
		target : init
		This target will contain the intiailziation
	=======================================================-->
	
	<target name="init" unless="no.init" depends="create-repo"
		description="This target will contain the intiailziation">
		<echo message="Executing ${ant.project.name} : init" />
		<mkdir dir="${lib.dir}"/>
		<mkdir dir="${test.lib.dir}"/>
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${instrumented.classes.dir}" />				
		<mkdir dir="${dist.dir}" />
		<!--<mkdir dir="${generated.src.dir}" />-->
		<property name="no.init" value="true" />
	</target>
	
	<!-- ==================================================
		target : download-jsch
	====================================================== -->
	<target name="download-jsch" unless="jsch.available">
		<echo message="Downloading jsch....." />		
			<get src="${ivy.sftp.remote}" dest="${ivy.jar.dir}/jsch-0.1.31.jar" verbose="true" usetimestamp="true" />
	</target>
	
	<!-- ====================================================
		target : download-ivy
		Download ivy if one is not available.
		=======================================================-->
	<target name="download-ivy" unless="ivy.available">
		<mkdir dir="${ivy.jar.dir}"/>
		<echo message="Downloading IVY....." />
		<get src="${ivy.jar.location}" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>
	
	<!-- ==================================================
		target : download-ant-contrib Its only called by reports-style in ivy-master-build
		It does not download if ant.contrib.available is set to true
	====================================================== -->
	<target name="download-ant-contrib" unless="ant.contrib.available">
		<echo message="Downloading ant-contrib....." />
		<get src="${ant-contrib.jar.location}" dest="${lib.dir}/ant-contrib-1.0b2.jar" verbose="true" usetimestamp="true"/>
	</target>
	
	<!-- ====================================================
		target: load-ivy         
            This target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy 2.0 in your ant lib, you can simply remove this
            target
        Note:- Forced to load only once, as I observed that in this task is getting called in every
        	subant invoke.    
		=======================================================-->
	<target name="load-ivy" depends="download-ivy,download-jsch" unless="ivy.loaded">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
	   	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	   	         uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
		<ivy:settings file="${proj.root.dir}/ivysettings.xml" id="c3pr.ivy.instance" />
		<property name="ivy.loaded" location="true"/>

	</target>
	
    <!-- ======================================================== 
          target: resolve              
    	============================================================ -->
    <target name="resolve" depends="clean-lib, init, load-ivy" unless="already.resolved"
    	description="--> resolve and retrieve dependencies with ivy">
    	<condition property="configs" value="${resolve.confs}" else="default">
    		<isset property="resolve.confs"/>
    	</condition>
    	<condition property="to.dir" value="${resolve.to.dir}" else="${lib.dir}">
    		<isset property="resolve.to.dir"/>
    	</condition>
    	
    	<echo message="Executing ${ant.project.name} : resolve with confs : ${configs}" />
    	<ivyResolve confs="${configs}" libdir="${to.dir}" resolveid="[org]-[module]"/>
    	<property name="already.resolved" value="true"/>
    </target>

	
    <!-- ======================================================== 
          target: resolve-test              
    	============================================================ -->
    <target name="resolve-test" depends="clean-lib-test, init, load-ivy" unless="already.resolved-test" 
    	description="--> resolve and retrieve 'test' dependencies with ivy">
    	<echo message="Executing ${ant.project.name} : resolve-test" />
    	<ivyResolve confs="test" libdir="${test.lib.dir}" resolveid="[org]-[module]-test"/>
    	<property name="already.resolved-test" value="true"/>
    </target>
  
    <!-- ========================================================== 
          target: report  outdated            
    	============================================================ -->
    <target name="report-old" depends="resolve" description="--> generates a report of dependencies">
    	<echo message="Executing in ${ant.project.name}" />
        <ivy:report todir="${build.dir}" />
    </target>
	
	<!-- ========================================================== 
	          target: report updated
	      ============================================================ -->
	   <target name="report" depends="resolve" description="--> generates a report of dependencies">
	     <echo message="Executing in ${ant.project.name}" />
	     <mkdir dir="${build.dir}/dependency-reports"/>
	     <ivy:report todir="${build.dir}/dependency-reports" settingsRef="c3pr.ivy.instance" graph="true"/>
	   </target>

    
    <!-- =============================================================== 
          target: compile              
         ============================================================= -->
    <target name="compile" depends="resolve" description="--> compile the project">
    	<echo message="Executing in ${ant.project.name}" />
    	<copy-resources src="${main.src.resources}" dest="${classes.dir}" filter="true"/>
    	<!--<javac srcdir="${generated.src.dir}" destdir="${classes.dir}" classpathref="main.classpath" debug="true" source="1.5" target="1.5"/>-->
        <javac srcdir="${main.src}" destdir="${classes.dir}" classpathref="main.classpath" debug="true" source="1.5" target="1.5"/>
    </target>

    
	<!-- ========================================================== 
          target: compile-test              
    =========================================================== -->
	<target name="compile-test" depends="check-testcase-type, compile-test-ui, compile-test-backend" description="compile the test classes of this project">
  	</target>
    
	<target name="compile-test-backend" depends="resolve-test" if="backend.true"
    		description=" compile the backend test classes of this project">
    	<echo message="Executing in ${ant.project.name}" />
    	<echo message="src dir is ${test.src}"/>
    	<echo message="class dir is ${test.classes.dir}"/>
    	<echo message="class dir is ${test.src.resources}"/>
    	
    	<copy-resources src="${test.src.resources}" dest="${test.classes.dir}" filter="true"/>
        <javac srcdir="${test.src}" destdir="${test.classes.dir}" excludes="edu/duke/cabig/c3pr/web/selenium/**"
 				classpathref="test.classpath" debug="true" source="1.5"  target="1.5"  />
    </target>
    
	<target name="compile-test-ui" depends="resolve-test" if="ui.true"
    		description="compile the selenium test classes of this project">
    	<echo message="Executing in ${ant.project.name}" />
    	<echo message="src dir is ${test.src}"/>
    	<echo message="class dir is ${test.classes.dir}"/>
    	<echo message="class dir is ${test.src.resources}"/>
    	
    	<copy-resources src="${test.src.resources}" dest="${test.classes.dir}" filter="true"/>
        <javac srcdir="${test.src}" destdir="${test.classes.dir}" includes="edu/duke/cabig/c3pr/web/selenium/**"
 				classpathref="test.classpath" debug="true" source="1.5"  target="1.5"  />
    </target>
	
	<!-- ================================= 
          target: clean-cobertura-dir             
         ================================= -->
	<target name="clean-cobertura-dir" description="--> clean the cobertura report dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${cobertura.report.dir}" />
	</target>
	<!-- ================================================================
	    target : clean-cobertura-instruments
	===================================================================-->
	<target name="clean-cobertura-instruments" description="--> clean the cobertura instruments classes dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${instrumented.classes.dir}" />
	</target>
	
	<!-- ================================= 
          target: clean-checkstyle-dir             
         ================================= -->
	<target name="clean-checkstyle-dir" description="--> clean the checkstyle dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${checkstyle.dir}" />
	</target>
	
	<!-- =====================================================================
		target : ivy-new-version 
			Will generate a new verion number
	========================================================================= -->
	<target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision"
			description="Will generate a new version number">
		<echo message="Executing in ${ant.project.name}" />
		<echo message="Executing ${ant.project.name} : ivy-new-version" />
		<!-- default module version prefix value -->
		<property name="module.version.prefix" value="${c3pr.version}" />
		
    	<!-- asks to ivy an available version number -->
		<ivy:info file="${ivy.file}" settingsRef="c3pr.ivy.instance"/>
    	<ivy:buildnumber 
    		organisation="${ivy.organisation}" module="${ivy.module}" 
    		revision="${module.version.prefix}" defaultBuildNumber="1" revSep="." settingsRef="c3pr.ivy.instance"/>
	</target>
    
	<!-- =====================================================================
		target : local-version 
			Will generate a new verion number for publishing in local repository
	========================================================================= -->
    <target name="local-version" description="Will generate a new verion number for publishing in local repository">
    	<echo message="Executing in ${ant.project.name}" />
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss"/>
			<format property="today" pattern="yyyy-MM-dd hh:mm:ss.mmm" />
		</tstamp>
        <property name="ivy.new.revision" value="${c3pr.version}-local-${now}"/>
    </target>

	<!-- =====================================================================
		target : version
			Will generate a new verion number for publishing in release repository
	========================================================================= -->
	<target name="version" depends="ivy-new-version"
			description="Will generate a new verion number for publishing in release repository">
		<echo message="Executing in ${ant.project.name}" />
		<tstamp>
			<format property="today" pattern="yyyy-MM-dd hh:mm:ss" />
		</tstamp>
    	<!-- create version file in classpath for later inclusion in jar -->
		<echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />
		<!-- load generated version properties file -->
        <property file="${classes.dir}/${ant.project.name}.properties" />
    </target>
	<!-- ===============================================================================================
		target:generate-jaxb
		This target will generate the java objects using XSD available in ${main.src.resources}/schema
	===================================================================================================-->
	<target name="generate-jaxb" description="This target will generate the java objects using XSD available in ${main.src.resources}/schema">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
			<classpath>
				<path refid="main.classpath" />
			</classpath>	        		
	    </taskdef>
		
		<mkdir dir="${generated.src.dir}"/>
	    <xjc destdir="${generated.src.dir}" extension="true" >
	    	<arg line="-npa
	    			   -Xcollection-setter-injector"/>
	    	<schema dir="${main.src.resources}/rules/schema">
	        	<include name="*.xsd"/>
	        </schema>
	        <produces dir="${generated.src.dir}" includes="**/schema/**/*.java"/>
	    </xjc>
    </target>
	<!-- ===============================================================================================
		target:generate-jibx
		This target will generate the java objects using XSD available in ${main.src.resources}/schema
	===================================================================================================-->
	<target name="generate-jibx" description="This target will generate the java objects using XSD available in ${main.src.resources}/schema">
		<mkdir dir="${generated.src.dir}"/>
		<taskdef name="xsd2jibx" classname="org.jibx.xsd2jibx.GeneratorAntTask">
			<classpath>
				<path refid="main.classpath" />
			</classpath>
		</taskdef>
		<xsd2jibx outputdir="${generated.src.dir}" >
			<xmlnamespacetojavapackage xmlnamespace="http://semanticbits.com/aeNotification" javapackage="com.semanticbits.aenotification"/>
			<xsdfileset dir="${main.src.resources}/schema" includes="AENotification.xsd">
			</xsdfileset>
		</xsd2jibx>
	</target>

	<!-- ===============================================================================================
		target:module-specific-flow
		This target is used for module specific flow.
	===================================================================================================-->
	
	<target name="module-specific-flow" description="The module specific overriding should be mentioned in this target">
		<!-- overwrite this module flow in module specific ivy-build.xml-->
	</target>
	
	<!-- ===============================================================================================
		target:module-specific-test-flow
		This target is used for module specific test flow. It will run before the test target
	===================================================================================================-->
	
	<target name="module-specific-test-flow" description="The module specific overriding should be mentioned in this target">
		<!-- overwrite this module flow in module specific ivy-build.xml-->
	</target>
    <!-- ================================= 
          target: jar              
         ================================= -->
    <target name="jar" depends="module-specific-flow, compile, version" 
    	description="--> make a jar file for this project">
    	<echo message="Executing in ${ant.project.name}" />
    	<makeJar dir="${dist.dir}" dir.classes="${classes.dir}" file.name="${jar.file}"/>
    </target>

    <!-- ================================= 
          target: jar-test              
         ================================= -->
    <target name="jar-test" depends="compile-test, version" 
    	description="--> make a jar file containing test classes of this project">
    	<echo message="Executing in ${ant.project.name}" />
    	<makeJar dir="${dist.dir}" dir.classes="${test.classes.dir}" file.name="${test.jar.file}"/>
    </target>

	
    <!-- ================================= 
          target: publish              
         ================================= -->
    <target name="publish" depends="clean-dist, init, jar, jar-test, test-report" 
    		description="--> publish this project in the ivy repository">
    	<echo message="Executing in ${ant.project.name}" />
    	<ivy:publish artifactspattern="${dist.dir}/[artifact].[ext]" 
    		resolver="semanticbits-repo"
    		pubrevision="${version}" 
    		status="release"
    		forcedeliver="true"
    		overwrite="true" settingsRef="c3pr.ivy.instance"/>
        <echo message="project ${ant.project.name} released with version ${version}" />
    </target>

    <!-- ================================= 
          target: publish-local              
         ================================= -->
    <target name="publish-local" depends="clean-dist, init, local-version, jar, jar-test, debug-info, test-report" 
    	description="--> publish this project in the local ivy repository">
    	<echo message="Executing in ${ant.project.name}" />
    	<ivy:publish artifactspattern="${dist.dir}/[artifact].[ext]" 
    		resolver="c3pr-local"
    		pubrevision="${version}"
    		status="integration"
    		forcedeliver="true"
    		pubdate="${now}"
    		overwrite="true" settingsRef="c3pr.ivy.instance"/>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>


	<!-- ====================================================
          target: clean-lib              
    =======================================================-->
    <target name="clean-lib" description="--> clean the project libraries directory (dependencies)">
    	<echo message="Executing in ${ant.project.name}" />
    	<echo message="Executing in ${ant.project.name}" />
        <delete includeemptydirs="true" dir="${lib.dir}"/>
    </target>
	
	<!-- ====================================================
		target : clean-lib-test
		Cleans the 3rd party libraries
	=======================================================-->
    <target name="clean-lib-test" description="--> clean the project libraries directory (dependencies)">
    	<echo message="Executing in ${ant.project.name}" />
        <delete includeemptydirs="true" dir="${test.lib.dir}"/>
    </target>
	
    <!-- ================================= 
          target: clean-dist              
         ================================= -->
    <target name="clean-dist" description="--> clean the project built files">
    	<echo message="Executing in ${ant.project.name}" />
        <delete includeemptydirs="true" dir="${dist.dir}"/>
    </target>
	
    <!-- ================================= 
          target: clean-classes              
         ================================= -->	
	<target name="clean-classes" description="--> clean the classes dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${classes.dir}" />
	</target>
	
    <!-- ================================= 
          target: clean-classes-test              
         ================================= -->	
	<target name="clean-classes-test" description="--> clean the test classes dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${test.classes.dir}" />
	</target>
	
    <!-- ================================= 
          target: clean-generated-src              
         ================================= -->	
	<target name="clean-generated-src" description="--> clean the generated sources dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${generated.src.dir}" />
	</target>
	
    <!-- ================================= 
          target: clean-test-results           
         ================================= -->	
	<target name="clean-test-results" description="--> clean the test result dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${test.results.dir}" />
	</target>
	
    <!-- ================================= 
          target: clean-test-reports              
         ================================= -->	
	<target name="clean-test-reports" description="--> clean the test report dir">
		<echo message="Executing in ${ant.project.name}" />
		<delete includeemptydirs="true" dir="${test.reports.dir}" />
	</target>
	
    <!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" depends="clean-classes, clean-classes-test, clean-dist, clean-lib, clean-lib-test, clean-test-results, clean-test-reports, clean-cobertura-instruments,clean-cobertura-dir" description="--> clean the project" />

	
	<!-- ============================================================== 
				target: corbetura-init                                                
			============================================================== -->
		<target name="corbetura-init" if="run.test" depends="clean-cobertura-dir">
			<ivy:resolve inline="true" organisation="cobertura" module="cobertura" revision="1.8" />
			<ivy:cachepath organisation="cobertura" module="cobertura" revision="1.8" inline="true" pathid="cobertura.classpath"/>
			<mkdir dir="${cobertura.report.dir}" />
			<mkdir dir="${cobertura.report.dir}/xmlreport" />
			<!-- <taskdef resource="tasks.properties">
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
			</taskdef> -->
			<taskdef resource="tasks.properties" classpathref="cobertura.classpath" />
			<cobertura-instrument todir="${instrumented.classes.dir}" datafile="${cobertura.report.dir}/cobertura.ser">
				<fileset dir="${classes.dir}">
					<include name="**/*.class" />
				</fileset>
			</cobertura-instrument>
		</target>

	<!-- ============================================================== 
			target: checkstyle-init                                                
		============================================================== -->
	<target name="checkstyle-init" depends="clean-checkstyle-dir">		
		<mkdir dir="${basedir}/build/checkstyle-report" />			
    </target>
	<!-- ============================================================== 
		target: test. If no Db property is given, the test target will set db
		as test-postgres                                                
	============================================================== -->
	<condition property="testPattern" value="**/${test}.class" else="edu/duke/cabig/**/*Test*.class">
		<isset property="test"/>
	</condition>
	
	<condition property="selenium-testPattern" value="**/${test}.class"
		               else="edu/duke/cabig/c3pr/web/selenium/**/*Test.class">
		        <isset property="test"/>
    </condition>

	
	<target name="test" if="run.test" depends="clean-test-results, corbetura-init" description="Runs the testcases">
		<echo message="Executing in ${ant.project.name}" />
		<echo message="Test results dir: ${test.results.dir}, with pattern ${testPattern} and classes from ${test.classes.dir}" />
		
		<mkdir dir="${test.results.dir}" />
		<junit printsummary="yes" errorproperty="test.failed" failureproperty="test.failed" 
			showoutput="true" fork="true" forkmode="once" timeout="600000" >

			<classpath location="${instrumented.classes.dir}" />
			<classpath refid="test.run.classpath" />
			
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.report.dir}/cobertura.ser" />
			
			<formatter type="plain"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${test.results.dir}">
				<fileset dir="${test.classes.dir}">
					<include name="${testPattern}" />
					<exclude name="edu/duke/cabig/**/*Abstract*Test*.class"/>
					<exclude name="edu/duke/cabig/**/*TestObject*.class"/>
					<exclude name="edu/duke/cabig/**/ApplicationTestCase*.class"/>
					<exclude name="edu/duke/cabig/**/*DaoTestCase*.class"/>
					<exclude name="edu/duke/cabig/**/SecurityContextTestUtils.class"/>
					<exclude name="edu/duke/cabig/**/CCTSCaXchangeBroadcasterTester.class"/>
					<exclude name="edu/duke/cabig/**/CCTSCaXchangeBroadcasterTester.class"/>
					<exclude name="edu/duke/cabig/**/*$*.class"/>
					<exclude name="edu/duke/cabig/**/ControllerTestCase.class"/>
					<exclude name="edu/duke/cabig/**/WebTestCase.class"/>	
					<exclude name="edu/duke/cabig/**/StudySubjectXMLImporterServiceTestCase.class"/>	
					<exclude name="edu/duke/cabig/**/XCCTSRegistrationMessageTest.class"/>
					<exclude name="edu/duke/cabig/**/TestEsbClient.class"/>
					<!-- we have commented couple of test cases in StudySubjectServiceIntegrationTestCase , we need to fix them later-->
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- ============================================================== 
				target: cobertura-report                                                
		============================================================== -->
	<target name="cobertura-report" if="run.test" description="-> Will create the corbetura coverage report">
		<cobertura-report format="html" destdir="${cobertura.report.dir}" srcdir="${main.src}" datafile="${cobertura.report.dir}/cobertura.ser" />
		<cobertura-report format="xml" destdir="${cobertura.report.dir}/xmlreport" srcdir="${main.src}" datafile="${cobertura.report.dir}/cobertura.ser" />
	</target>
	
	<!-- ============================================================== 
			target: test-report                                                
		============================================================== -->
		<target name="test-report" if="run.test" depends="test, cobertura-report">
			<echo message="Executing in ${ant.project.name}" />
			<echo message="################################################### ${selenium-testPattern} ##################" />
			<mkdir dir="${test.reports.dir}" />
			<junitreport todir="${test.reports.dir}">
				<fileset dir="${test.results.dir}">
					<include name="TEST-*.xml" />
				</fileset>
				<report format="frames" todir="${test.reports.dir}" />
			</junitreport>
<!--		<fail message="Tests failed! ${ant.project.name} , Check test reports in ${test.reports.dir} for more details." if="test.failed" /> -->
		</target>
	
	<!-- ==========================================================
		target: debug-info
	=============================================================-->
	<target name="debug-info" description="Echoes useful debug information" >
			<echo message="base.dir=${basedir}" />
			<echo message="ant.file=${ant.file}" />
			<echo message="ivy.available = ${ivy.available}" />
			<echo message="ant.project.name = ${ant.project.name}" />
			<echo message="module.version.target = ${module.version.target}" />
			<echo message="main.src = ${main.src}" />
			<echo message="main.src.resources=${main.src.resources}" />
			<echo message="skip.test = ${skip.test}" />
			<echo message="run.test = ${run.test}" />
			<echo message="${ant.file.common}" />
			<echo message="db = ${db}" />
			<echo message="databaseConfigurationName = ${databaseConfigurationName}" />
			<echo message="catalina.home = ${catalina.home}" />
	</target>
	
	<!-- ================================= 
          target: testing              
         ================================= -->
    <target name="testing" depends="load-ivy" 
    		description="--> this target is for ant build file development. Should not be called for performing usual tasks" />
	<!-- ================================= 
          target: uctrace-report-temp            
         ================================= -->
    <target name="uctrace-report-temp" depends="load-ivy, resolve" description="--> Tracebility matrix report">
    	<ivy:retrieve organisation="log4j" module="log4j" revision="1.2.12" inline="true" pattern="${lib.dir}/log4j-1.2.14.jar" sync="true"/>
    	<ivy:retrieve organisation="edu.duke.cabig.c3pr" module="c3pr-management" revision="2.1.1" inline="true" pattern="${lib.dir}/c3pr-management-1.0.jar" sync="true"/>
    	<property name="antfiles.dir" location="${basedir}/../../antfiles"/>
    	<taskdef name="useCaseTraceabilityReport" classname="edu.duke.cabig.c3pr.ant.UseCaseTraceabilityReport">
    	            <classpath>
    	                <pathelement location="${antfiles.dir}"/>
    	            	<fileset dir="${lib.dir}">
    	            	  <include name="*.jar"/>
    	            	</fileset>
    	            </classpath>
    	        </taskdef>
    	<useCaseTraceabilityReport
    	                        destDir="${build.dir}/uctrace"
    	                        srcDir="${test.src}"
    	                        useCasesAnnotationClassName="edu.duke.cabig.c3pr.C3PRUseCase">

    	                    <classpath>
    	                    	<pathelement location="C:\temp\usecase-report.jar"/>
    	                    	<!--pathelement location="C:\Documents and Settings\Jojo Singh\.m2\repository\gov\nih\nci\cabig\ctms\ctms-commons-testing-uctrace\0.9-SNAPSHOT\ctms-commons-testing-uctrace-0.9-SNAPSHOT.jar"/-->
    	                    	<!--	<pathelement location="C:\Documents and Settings\Jojo Singh\.m2\repository\gov\nih\nci\cabig\ctms\ctms-commons-base\0.9-SNAPSHOT\ctms-commons-base-0.9-SNAPSHOT.jar"/>
    	                    	<pathelement location="C:\Documents and Settings\Jojo Singh\.ivy2\c3pr-cache\ant\ant\jars\ant-1.6.5.jar"/> -->
    	                    	<fileset dir="${lib.dir}">
    	                            <include name="*.jar"/>
    	                        </fileset>
    	                    	<fileset dir="${test.lib.dir}">
    	                    	 	<include name="*.jar"/>
    	                    	  </fileset>
    	                    	<pathelement path="${test.classes.dir}"/>
    	                    	<pathelement path="${classes.dir}"/>
    	                    </classpath>

    	                </useCaseTraceabilityReport>
    </target>
<!-- ================================= 
          target: uctrace-report              
         ================================= -->
    <target name="uctrace-report" depends="load-ivy, resolve, resolve-test" description="--> Tracebility matrix report">
    	<taskdef name="useCaseTraceabilityReport" classname="edu.duke.cabig.c3pr.ant.UseCaseTraceabilityReportTask" 
    			 classpathref="test.classpath" />
    	<useCaseTraceabilityReport destDir="${build.dir}/uctrace"
    	    	                   srcDir="${test.src}"
    	    	                   useCasesAnnotationClassName="edu.duke.cabig.c3pr.C3PRUseCase">
    		<classpath>
    		   <path refid="test.classpath"/>
    		   <pathelement path="${test.classes.dir}"/>
    		   <pathelement path="${classes.dir}"/>
    		</classpath>
    	</useCaseTraceabilityReport>
    </target>

	<target name="debug-database-info" description="Echoes database information">
			<echo message="datasource.url=${datasource.url}" />
			<echo message="datasource.username=${datasource.username}" />
			<echo message="datasource.password = ${datasource.password}" />
			<echo message="datasource.driver = ${datasource.driver}" />
			<echo message="datasource.dialect = ${datasource.dialect}" />
			<echo message="databaseConfigurationName = ${databaseConfigurationName}" />
	</target>
	
	<target name="debug-tomcat" description="Echoes tomcat information">
			<echo message="env.CATALINA_HOME=${env.CATALINA_HOME}" />
			<echo message="catalina.home=${catalina.home}" />
	</target>
	
	<!-- CheckStyle for individual projects - accepts project as a param-->
	<target name="run-report-style" depends="checkstyle-init" description="Check the style for a single project." >

		<checkstyle config="${antfiles.dir}/c3pr_checks.xml" failOnViolation="false">
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${basedir}/build/checkstyle-report/${project}.txt"/>
            <formatter type="xml" toFile="${basedir}/build/checkstyle-report/${project}.xml"/>
        </checkstyle>
		<xslt in="${basedir}/build/checkstyle-report/${project}.xml" 
		      out="${basedir}/build/checkstyle-report/${project}.html"
              style="${antfiles.dir}/checkstyle.xsl">
            <param name="project" expression="${project}"/>
        </xslt>
		
		<echo>================================================================</echo>
    	<echo>CheckStyle Report available at </echo>
    	<echo>${basedir}/build/checkstyle-report</echo>
    	<echo>================================================================</echo>
    </target>
	
	<!-- ========================================================================
			target: load-datasource
				Will check the datsource properties identified by -Ddb=xxx, in USER_HOME/.caaers/ 
				if not available there, it will search in /etc/caaers/
		============================================================================= -->
		<target name="find-datasource" unless="dsFile.located" description="Loads the datasource properties">
			<echo message="databaseConfigurationName : ${databaseConfigurationName}" />
			<property name="dsFileName" value="${databaseConfigurationName}.properties"/>
			<echo message="databaseConfiguration file name : ${dsFileName}" />
			<condition property="dsFile" value="${catalina.home}/conf/c3pr/${dsFileName}" 
					   else="${antfiles.dir}/${dsFileName}">
				<available file="${catalina.home}/conf/c3pr/${dsFileName}" />
			</condition>
			<property name="dsFile.located" value="true"/>
		</target>
		
		<target name="tomcat-start">
			<echo message="catalina.home : ${env.CATALINA_HOME}" />
			<property name="catalina.home" value="${env.CATALINA_HOME}"/>
			<java jar="${catalina.home}/bin/bootstrap.jar" fork="true">
				    	<jvmarg value="-Dcatalina.home=${catalina.home}"/>
						<sysproperty key="CATALINA_HOME" value="${env.CATALINA_HOME}"/>
					</java>
		</target>

		<target name="tomcat-stop">
			<echo message="catalina.home  : ${env.CATALINA_HOME}"/>		
			<property name="catalina.home" value="${env.CATALINA_HOME}"/>
			<java jar="${catalina.home}/bin/bootstrap.jar" fork="true">
				        <jvmarg value="-Dcatalina.home=${catalina.home}"/>
				    	<sysproperty key="CATALINA_HOME" value="${env.CATALINA_HOME}"/>
				        <arg line="stop"/>
				    </java>
		</target>
	
	<target name="tomcat-start-windows">
		<echo message="catalina.home : ${env.CATALINA_HOME}" />
		<property name="catalina.home" value="${env.CATALINA_HOME}"/>
		<java jar="${catalina.home}/bin/bootstrap.jar" fork="true">
	    	<jvmarg value="-Dcatalina.home=${catalina.home}"/>
			<sysproperty key="CATALINA_HOME" value="${env.CATALINA_HOME}"/>
		</java>
	</target>

	<target name="tomcat-stop-windows">
		<echo message="catalina.home  : ${env.CATALINA_HOME}"/>		
		<property name="catalina.home" value="${env.CATALINA_HOME}"/>
	    <java jar="${catalina.home}/bin/bootstrap.jar" fork="true">
	        <jvmarg value="-Dcatalina.home=${catalina.home}"/>
	    	<sysproperty key="CATALINA_HOME" value="${env.CATALINA_HOME}"/>
	        <arg line="stop"/>
	    </java>
	</target>
	</project>

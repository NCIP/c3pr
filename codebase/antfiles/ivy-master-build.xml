<project name="c3pr-master-build" xmlns:ivy="antlib:org.apache.ivy.ant">
	<echo>This is the basedir: ${basedir}</echo>
    <property file="build.properties" />
	<property file="c3pr-ivy.properties" />
    <import file="${basedir}/common.xml"/>
	<import file="${basedir}/build-utilities.xml"/>
	<property name="projects.dir" value="${basedir}/../projects" />
	
	
	<!-- ==================================================================
		target : buildlist
	====================================================================== -->
  	<target name="buildlist" depends="load-ivy" unless="buildlist.done" description="Will find the correct order of build dependency"> 
    	<ivy:buildlist reference="build-path">
    		<fileset file="${basedir}/ivy-build.xml" />
      		<fileset file="${projects.dir}/esb-client/ivy-build.xml" />
    		<fileset file="${projects.dir}/core/ivy-build.xml" />
    		<fileset file="${projects.dir}/web/ivy-build.xml" />
    	</ivy:buildlist>
  		<property name="buildlist.done" value="true" />
  		<echo message="buildList : ${build-path}" />
  	</target>
	
	<!-- ==================================================================
		target : publish-all
	====================================================================== -->
  	<target name="publish-all" depends="buildlist, clean" 
  			description="compile, jar and publish all projects in the right order, publishes them into local repository">
   		 <subant target="publish-local" buildpathref="build-path" />
  	</target>
	
	<!-- ==================================================================
		target : release-all
	====================================================================== -->
	<target name="release-all" depends="buildlist" 
	  			description="compile, jar and publish all projects in the right order, then releases it to Shared Repository">
	   	<subant target="publish" buildpathref="build-path" />
	</target>
	
	<!-- ==================================================================
		target : resolve-all
	====================================================================== -->
   <target name="resolve-all" depends="buildlist" 
   		description="Will call the resolve target on each of the module">
   		<subant target="resolve" buildpathref="build-path" />
   </target>
	
	<!-- ==================================================================
		target : clean-all
	====================================================================== -->
  <target name="clean-all" depends="buildlist" description="clean all projects">
    <subant target="clean" buildpathref="build-path" />
  </target>
	
	<!-- ==================================================================
		target : clean
	====================================================================== -->
  <target name="clean" depends="clean-all, clean-repo" 
  			description="clean delete repository, and all projects" />
	
	<target name="clean-repo" description="cleans the local repository">
		<delete dir="${local.repo.dir}"/>
	</target>
	
	<!-- ==================================================================
		target : clean-cache
	====================================================================== -->
	<target name="clean-cache" depends="load-ivy" description="Cleans the ivy cache">
		<ivy:cleancache/>
	</target>
	<!-- ==========================================================
		target : migrate
		This will delegate the call to c3pr-core:migrate, this is added
		to do migrate and build as a single job using hudson. 
	=============================================================-->
	<target name="migrate">
		<subant target="migrate" buildpath="${projects.dir}/core/ivy-build.xml" />
	</target>

	<!-- ==========================================================
			target : drop-and-create-existing-database
			This will drop the existing database and create a new database by deligating call to c3pr-core:drop-and-create-existing-database, this is added
			as a single job using hudson. 
		=============================================================-->
		<target name="drop-and-create-existing-database">
			<subant target="drop-and-create-existing-database" buildpath="${projects.dir}/core/ivy-build.xml" />
		</target>

	
	<!-- ==========================================================
		target : migrate-test
		This will delegate the call to c3pr-core:migrate-test, this is added
		to do migrate and build as a single job using hudson. 
	=============================================================-->
	<target name="migrate-test">
		<subant target="migrate-test" buildpath="${projects.dir}/core/ivy-build.xml" />
	</target>

	<!--- =================================================================================
		target : javadoc
	======================================================================================= -->
    <target name="javadoc" description="Compile the Javadoc API documentation to javadoc dir">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc
        	classpathref="lib.path.id"
        	destdir="${javadoc.dir}"
        	use="true"
        	protected="true"
        	version="true"
        	windowtitle="C3PR API Documentation"
        	Overview="${javadoc.dir}/package.html"
        	doctitle="C3PR API Documentation"
        	link="${sun.javadoc.link}">
        	<packageset dir="${basedir}" defaultexcludes="yes" >
   				<include name="**/main/java/**/*"/>
		    </packageset>
        </javadoc>


    </target>

	 <!--Does a local build. For Developers use only -->
    <target name="deploy-webapp-local" depends="build-core"
            description="Builds all c3pr modules and deploys webapp on your web/web local">
    	<ant target="deployLocal" antfile="${projects.dir}/web/ivy-build.xml" dir="${projects.dir}/web" inheritall="false">
			<property name="env.skip.test" value="true"></property>
			<property name="env.CATALINA_HOME" value="${env.CATALINA_HOME}"/>
    	</ant>
    </target>
	
    <target name="deploy-webapp" depends="build-core"
            description="Builds all c3pr modules and deploys webapp on your web/web local">
    	<ant target="deploy" antfile="${projects.dir}/web/ivy-build.xml" dir="${projects.dir}/web" inheritall="false">
			<property name="env.skip.test" value="true"></property>
			<property name="env.CATALINA_HOME" value="${env.CATALINA_HOME}"/>
    	</ant>
    </target>
	
	<!-- ==========================================================
		target : tomcat.security
		This will delegate the call to c3pr-core:tomcat.security.
	=============================================================-->
	<target name="tomcat.security" depends="debug-database-info" >
		<ant target="tomcat.security" antfile="${projects.dir}/core/ivy-build.xml" inheritall="false" dir="${projects.dir}/core">
			<property name="env.CATALINA_HOME" value="${env.CATALINA_HOME}"/>
		</ant>
	</target>
	
	<target name="build-core" depends="clean-repo"
            description="Builds all c3pr modules that core depends on and create the core jar">
		<ant target="publish-local" antfile="${basedir}/ivy-build.xml" inheritall="false">
    		<property name="env.skip.test" value="true"></property>
    	</ant>
    	<ant target="publish-local" antfile="${projects.dir}/esb-client/ivy-build.xml" dir="${projects.dir}/esb-client" inheritall="false">
    		<property name="env.skip.test" value="true"></property>
    	</ant>
		<ant target="publish-local" antfile="${projects.dir}/core/ivy-build.xml" dir="${projects.dir}/core" inheritall="false">
    		<property name="env.skip.test" value="true"></property>
    	</ant>
    </target>
	
	<!-- =============================================================== -->
    <!-- c3pr Protocol Ingestion Grid Service                            -->
    <!-- =============================================================== -->
    <target name="build-grid" depends="build-core"
            description="Builds the c3p3 Registration Consumer grid node">
        <ant dir="${projects.dir}/grid" inheritAll="false" antfile="ivy-build.xml" target="build-grid"/>
    </target>

	<target name="deploy-grid-RegistrationConsumer" depends="checkGlobus,checkTomcat"
            description="Will deploy the RegistrationConsumer grid service">
        <ant dir="${projects.dir}/grid" antfile="ivy-build.xml" inheritall="false"
             target="deployTomcat-RegistrationConsumer"/>
    </target>

    <target name="deploy-grid-StudyConsumer" depends="checkGlobus,checkTomcat"
            description="Will deploy the RegistrationConsumer grid service">
        <ant dir="${projects.dir}/grid" antfile="ivy-build.xml" inheritall="false"
             target="deployTomcat-StudyConsumer"/>
    </target>

    <target name="deploySkeletonRegistrationGridService" depends="checkGlobus,checkTomcat"
            description="Will deploy the Skeleton RegistrationConsumer grid service">
        <ant dir="${projects.dir}/grid" antfile="ivy-build.xml" inheritall="false"
             target="deploySkeletonRegistrationGridService"/>
    </target>

    <target name="deploySkeletonStudyGridService" depends="checkGlobus,checkTomcat"
            description="Will deploy the Skeleton RegistrationConsumer grid service">
        <ant dir="${projects.dir}/grid" antfile="ivy-build.xml" inheritall="false"
             target="deploySkeletonStudyGridService"/>
    </target>

	
	<!-- ==========================================================
		target : Installer targets
	=============================================================-->
	
	<target name="create-online-installer" depends="prepareInstallerForRelease"
            description="Builds the installer project">
		<subant target="build-installer" buildpath="${projects.dir}/installer/ivy-build.xml"/>
	</target>


    <target name="create-offline-installer" depends="prepareInstallerForRelease"
            description="Builds the offline version of the installer">
        <subant target="build-offline-installer" buildpath="${projects.dir}/installer/ivy-build.xml"/>
    </target>
	
	<!-- =============================================================== -->
    <!-- create target to create a release of Installer  project          -->
    <!-- =============================================================== -->
    <target name="prepareInstallerForRelease" depends="clean">
        <property name="project.archive" value="c3prv2-installpack.zip"/>
    	<delete dir="${projects.dir}/installer/installpack"/>
        <mkdir dir="${projects.dir}/installer/installpack"/>
        <zip destfile="${projects.dir}/installer/installpack/${project.archive}">
            <zipfileset dir="${basedir}" prefix="antfiles"/>
            <zipfileset dir="${projects.dir}/core" prefix="projects/core"/>
            <zipfileset dir="${projects.dir}/web" prefix="projects/web"/>
            <zipfileset dir="${projects.dir}/esb-client" prefix="projects/esb-client"/>
            <!--<zipfileset dir="${projects.dir}/grid" prefix="projects/grid"/>
            <zipfileset dir="${projects.dir}/../share" prefix="share"/>-->
        </zip>
        <zip destfile="${projects.dir}/installer/installpack/ivy2.zip">
            <zipfileset dir="${ivy.cache}" prefix="c3pr-cache"/>
        	<zipfileset dir="${ivy.jar.dir}" prefix="ivy-jars"/>
        </zip>
    </target>

	<!-- ================================= 
	          target: report-all              
	         ================================= -->
   <target name="report-all" depends="buildlist" description="--> Generate report of all the project dependencies">
     <subant target="report" buildpathref="build-path" />
   </target>
 
	<!-- ================================= 
	      target: cobertura coverage report            
	     ================================= -->	
	<target name="coverage-report" depends="clean-cobertura-dir,load-ivy" description="--> Generates a combined Code coverage report">
    	<ivy:resolve inline="true" organisation="cobertura" module="cobertura" revision="1.8" />
    	<ivy:cachepath organisation="cobertura" module="cobertura" revision="1.8" inline="true" pathid="cobertura.classpath"/>
    	<mkdir dir="${cobertura.report.dir}" />
    	<taskdef  resource="tasks.properties" classpathref="cobertura.classpath" />
    	<cobertura-merge datafile="${cobertura.report.dir}/cobertura.ser">
    		<fileset dir="." includes="**/cobertura.ser" />
		</cobertura-merge>
    	<echo>================================================================</echo>
    	<echo>Code Coverage Report available at </echo>
    	<echo>${cobertura.report.dir}/index.html</echo>
    	<echo>================================================================</echo>
    	<cobertura-report format="html" destdir="${cobertura.report.dir}"  datafile="${cobertura.report.dir}/cobertura.ser" >
    	    <fileset dir=".">
    	        <include name="**/src/main/java/**/*.java" />
    	    </fileset>
    	</cobertura-report>
	</target>
</project>
